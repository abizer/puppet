#!/usr/bin/env python3
"""Accepts alerting information from Munin on the command line and forwards the
alerts to root.

The expected call format from Munin is

    mail-munin-alerts <hostname> <plugin name> \
            [<list of alert fields>] [<list of field values>]

The list of warnings/criticals allows filtering of unhelpful messages such as
those only containing OKs or UNKNOWNs. The list of fields must be in the same
order as the list of alerts.

To test changes to this script, try a command like:
    echo hi | mail-munin-alert --mail-to <user>@ocf.berkeley.edu tsunami.ocf.berkeley.edu some-plugin some-metric 1
"""
import argparse
from sys import argv
from sys import stdin
from syslog import syslog

from ocflib.infra import hosts
from ocflib.misc.mail import send_mail


MAIL_FROM = 'Munin <munin@ocf.berkeley.edu>'
MAIL_TO = 'Monitoring <mon@ocf.berkeley.edu>'


# Filter out uninteresting or noisy warnings at the individual level
IGNORED_WARNINGS = {
    'avgwrwait',
    'avgrdwait',
}


# Enumerate uninteresting discrete values (e.g. exit codes)
IGNORED_VALUES = {
    # smartctl exits nonzero even if there are no current errors
    'smartctl_exit_status': {32, 64, 96, 128, 160, 192, 224},
}


def send_alert(host, plugin, mail_to=MAIL_TO):
    ldap_entry, = hosts.hosts_by_filter('(cn={})'.format(host.split('.')[0]))

    if ldap_entry['type'] == 'staffvm':
        # We don't alert on staff VMs because staff are hozers and it's just spam.
        # TODO: when puppetdb is ready, consider sending to the staffvm owner.
        syslog('not sending alert for host {} because it is a staff vm'.format(host))
        return

    if ldap_entry['type'] == 'desktop' and plugin == 'memory':
        # We don't want to send out memory alerts on desktops, because some
        # people really like using large amounts of memory on the desktops, and
        # we shouldn't get unactionable alerts when they do
        syslog('not sending alert for host {} because it is a memory alert for a desktop'.format(host))
        return

    dns_names = ', '.join(sorted(
        ldap_entry.get('dnsCname', []) + ldap_entry.get('dnsA', []),
    )) or '(none)'

    subject = 'Munin alert for {} ({[type]})'.format(host, ldap_entry)
    body = (
        '{status}\n'
        'See graph at https://munin.ocf.berkeley.edu/ocf.berkeley.edu/{host}/{plugin}.html\n'
        '\n'
        'Host details:\n'
        '  - Type: {ldap_entry[type]}\n'
        '  - Environment: {ldap_entry[environment][0]}\n'
        # TODO: once puppetdb is a thing, it'd be great to read classes and owners from it
        '  - DNS names: {dns_names}\n'
    ).format(
        status=''.join(stdin),
        host=host,
        plugin=plugin,
        ldap_entry=ldap_entry,
        dns_names=dns_names,
    )
    send_mail(to=mail_to, subject=subject, body=body, cc=None, sender=MAIL_FROM)


def main(argv):
    parser = argparse.ArgumentParser(description='Mail out a munin alert.')
    parser.add_argument('--mail-to', default=MAIL_TO)
    parser.add_argument('host')
    parser.add_argument('plugin')
    parser.add_argument('fields', nargs='*')
    args = parser.parse_args(argv[1:])

    mail_to = args.mail_to
    host, plugin = args.host, args.plugin

    try:
        num_fields = len(args.fields) // 2
        fields = dict(zip(args.fields[:num_fields], args.fields[num_fields:]))
        if not all(field in IGNORED_WARNINGS or
                   float(value) in IGNORED_VALUES.get(field, ())
                   for field, value in fields.items()):
            syslog('sending alert with args {}'.format(argv))
            send_alert(host, plugin, mail_to)
    except Exception as ex:
        syslog("caught exception '{}' with args {}".format(ex, argv))
        raise


if __name__ == '__main__':
    main(argv)
