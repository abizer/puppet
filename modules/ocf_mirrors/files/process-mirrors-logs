#!/usr/bin/python
import argparse
import os
from datetime import date

import pymysql

OCFSTATS_PWD = os.environ['OCFSTATS_PWD']
MIRRORS_PATH = '/opt/mirrors/ftp'
LOG_PATH = '/var/log/apache2'
LOG_NAME = 'mirrors.ocf.berkeley.edu_access.log'

sources = [mirrored for mirrored in os.listdir(MIRRORS_PATH)
           if os.path.isdir(os.path.join(MIRRORS_PATH, mirrored)) and not mirrored.startswith('.')]

sources.append('other')  # catchall


def build_dists():
    return {mirrored: {'up': 0, 'down': 0} for mirrored in sources}


def process_file(fn):
    dists = build_dists()
    with open(fn, 'r') as f:
        for line in f:
            stats = line.split()

            # extract dist name from request url
            # '/debian/pool/main/h/hwdata/...' -> 'debian'
            dist = stats[6]
            dist = dist.split('/')[1] if '/' in dist else dist

            # record if we returned http 2xx/3xx
            if stats[8][0] in ('2', '3') and dist in dists:
                dists[dist]['up'] += int(stats[-2])
                dists[dist]['down'] += int(stats[-1])
            else:
                dists['other']['up'] += int(stats[-2])
                dists['other']['down'] += int(stats[-1])
    return dists


def to_mysql(dists, dt=None, quiet=False):
    dt = dt or date.today()
    conn = pymysql.connect(
        host='mysql.ocf.berkeley.edu',
        user='ocfstats',
        password=OCFSTATS_PWD,
        db='ocfstats',
        autocommit=True,
        cursorclass=pymysql.cursors.DictCursor,
    )

    with conn as cursor:
        for dist in dists:
            cursor.execute(
                'INSERT INTO `mirrors` (`date`, `dist`, `up`, `down`) VALUES (%s, %s, %s, %s)',
                (dt, dist, dists[dist]['up'], dists[dist]['down'])
            )

            if not quiet:
                print('{:20} {:8} {:8}'.format(dist, dists[dist]['up'], dists[dist]['down']))


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Process mirrors logs to calculate network usage '
                                                 'and store in ocfstats')
    parser.add_argument('-q', '--quiet', action='store_true',
                        help='do not print stats after collecting them')
    parser.add_argument('log_file', nargs='?', default=os.path.join(LOG_PATH, LOG_NAME),
                        help='log file to parse')
    parser.add_argument('date', nargs='?', default=date.today(),
                        help='date this log file corresponds to')

    args = parser.parse_args()

    to_mysql(
        process_file(args.log_file),
        args.date,
        args.quiet
    )
